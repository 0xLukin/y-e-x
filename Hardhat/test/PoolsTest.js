const { ethers } = require("hardhat");
describe("PoolsTest", function() {
    it("PoolsTest", async function() {
      console.log("start")
      const [dev] = await ethers.getSigners()
      const FtokenFactory = await ethers.getContractFactory("F")
      const Ftoken = await FtokenFactory.deploy()
      await Ftoken.deployed()
      console.log("tokenF deployed")
      const vaultFactory = await ethers.getContractFactory("Vault")
      const vault = await vaultFactory.deploy(Ftoken.address)
      await vault.deployed()
      console.log("vault deployed")
      await Ftoken.setVault(vault.address)
      console.log("Ftoken set vault success")
      const AtokenFactory = await ethers.getContractFactory("A")
      const Atoken = await AtokenFactory.deploy()
      await Atoken.deployed()
      console.log("tokenA deployed")
      const number100 = ethers.utils.parseUnits("100", 18)
      await Atoken.mint(dev.address,number100)
      await Atoken.mint(vault.address,number100)
      console.log("minted and approved success")  
      const number50 = ethers.utils.parseUnits("50", 18)
      const poolsFactory = await ethers.getContractFactory("Pools")
      const pool = await poolsFactory.deploy(vault.address,Ftoken.address)
      await pool.deployed()
      console.log("pool deployed")  
      await pool.createLiquidity(Atoken.address,number50,number50,10)
      console.log("create liquidity success") 
      await Atoken.approve(pool.address,number100)
      await vault.authorizePermit(Atoken.address,pool.address)
      await vault.authorizePermit(Ftoken.address,pool.address)
      const number10 = ethers.utils.parseUnits("10", 18)
      await pool.swap(number10,[Atoken.address,Ftoken.address],dev.address)
      const balance = await Ftoken.balanceOf(dev.address)
      console.log("swap success,tokenA balance is",balance) 
  })
})